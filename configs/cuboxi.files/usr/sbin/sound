#!/bin/sh

JACKNAME=default
MIXERNAME="SoftMaster"
INIT_VOL="/etc/.soundvolume"

GPIO=504
GPIO_HOLD=60

exec 1>>/tmp/sound.log
exec 2>&1

N_CPUS=`cat /proc/cpuinfo | awk '/^processor/{print $3}'| wc -l`
echo "Detected $N_CPUS CPUs"

# increase priority of apps by this amount
JACK_PRI=70

# critical interrupts- eg USB
IRQ_PRI=99
IRQS=
irq_addrs="2184000 2184200"

for addr in $irq_addrs; do IRQS="$IRQS `pgrep $addr`"; done
cpu_offst=0
for irq in $IRQS; do
	chrt -fp $IRQ_PRI $irq
	taskset -p $((0x1<<cpu_offst)) $irq
	cpu_offst=$(((cpu_offst+1)%N_CPUS))
done

SOUND_VAR_DIR="/var/run/sound"
ZITA_VAR_DIR="/var/run/zita-n2j"
check_zita_ports() {
	zita_ports=`ls ${ZITA_VAR_DIR}/ifaces/`
	lsp=`jack_lsp -c`
	active=`echo "$lsp" | grep '   '`
	for client in $zita_ports; do
		echo "$lsp" | grep $client >/dev/null || {
			echo "removing jack client $client from list"
			rm ${ZITA_VAR_DIR}/ifaces/$client
			continue
		}
		echo "$active" | grep $client >/dev/null || {
			echo "connecting jack client $client"
			jack_connect ${client}:out_1 jconvolver:in.L
			jack_connect ${client}:out_2 jconvolver:in.R
		}
	done
}

# pid, exepath
checkpid(){
	local path=`readlink -f $1` && [ "$path" == "$2" ] || return 1
}

mkdir -p $SOUND_VAR_DIR

ALSA_FORMAT=

# arg 1 is format, arg 2 is additional option- eg device
alsa_test() {
	aplay $2 -d1 -f$1 -c2 -r48000 /dev/zero &
	aplay_pid=$!
	sleep 2
	pkill aplay
	wait $aplay_pid
}

set_asla_format() {
	formats="S32_LE S24_3LE S16_LE"
	for fmt in $formats; do
		ALSA_FORMAT=$fmt
		alsa_test $fmt -Dhw:0 && break
	done
	echo "Card supports up to $ALSA_FORMAT- using this for alsa"
	write_alsa_config
	[ `readlink "/etc/asound.conf" 2>/dev/null` == "/var/run/sound/asound.conf" ] || {
		rm -f /etc/asound.conf 2>/dev/null
		ln -s $SOUND_VAR_DIR/asound.conf /etc/asound.conf
		echo "Created Alsa config symlink"
	}
	echo "setting mixer to $ALSA_FORMAT"
	alsa_test $ALSA_FORMAT -Dduplex
}

write_alsa_config() {
	cat << EOF > $SOUND_VAR_DIR/asound.conf
# Set Default sound card
pcm.snd_card {
   type hw
   card 0
}

# Allow mixing of multiple output streams to this device
pcm.dmixer {
   type dmix
   ipc_key 1024
   slave.pcm "snd_card"
   slave {
      period_time 0
      period_size 2048
      buffer_size 8192
      format $ALSA_FORMAT
      rate 48000
   }

   bindings {
      0 0
      1 1
   }
}

pcm.softvol {
    type            softvol
    slave {
        pcm         "dmixer"
    }
    control {
        name        "SoftMaster"
        card        0
    }
}

ctl.!default {
	type hw
	card 0
}

ctl.softvol {
	type hw
	card 0
}

ctl.dmixer {
        type hw
        card 0
}

ctl.duplex {
        type hw
        card 0
}

pcm.dsnooper {
   type dsnoop
   ipc_key 1024
   slave.pcm "snd_card"

   slave {
      period_time 0
      period_size 2048
      buffer_size 8192
      format $ALSA_FORMAT
      rate 48000
   }

   bindings {
      0 0
      1 1
   }
}

pcm.duplex {
   type asym
   playback.pcm "softvol"
   capture.pcm "dsnooper"
}

pcm.!default {
   type plug
   slave.pcm "duplex"
}

pcm.jackdsp {
    type jack
    playback_ports {
        0 jconvolver:in.L
        1 jconvolver:in.R
    }
}

pcm.jack {
    type plug
    slave { pcm "jackdsp" }
    hint {
 	description "JACK DSP port"
    }
}

EOF
}


echo "`date` starting sound service"
start=
while true; do
	sleep 1
	checkpid /var/run/sound/jackd /usr/bin/jackd || {
		# soft mixer does not appear straight away...
		# for some reason when jack loads it gets fixed to 100%
		# and cannot be reduced... makes things a tad loud
		# so we trick the mixer into existance, then set it
		# then start jack...
		# and to add to the fun, sometimes aplay plays indefinitely even if
		# we set the duration to 1
		set_asla_format
		
		init_vol=`printf %d $(cat "$INIT_VOL" 2>/dev/null) 2>/dev/null`||init_vol=12
		amixer sset $MIXERNAME $((init_vol*255/100)) || continue
		
		echo "Set mixer $MIXERNAME level to ${init_vol}%... Starting Jack"
		jackd -R -P$JACK_PRI -d alsa -dduplex -r48000 -zs -s -i2 -o2 -n3 -p2048 &
		jackpid=$!
		taskset -p $((0x1<<cpu_offst)) $jackpid
		echo "started jack on CPU $((1+cpu_offst))"
        cpu_offst=$(((cpu_offst+1)%N_CPUS))
		rm /var/run/sound/jackd 2>/dev/null
		ln -s /proc/${jackpid}/exe /var/run/sound/jackd || continue
		start=1
		continue
	}
	
	[ "$start" != "1" ] || \
		jackres=`jack_wait -c -s $JACKNAME 2>/dev/null | tail -n1` && [ "$jackres" == "running" ] || \
		continue
	
	# check if jconvolver running
	checkpid /var/run/sound/jconvolver /usr/bin/jconvolver || {
		echo "Starting convolver"
		jconvolver -s $JACKNAME /root/convolver.jconv &
		convpid=$!
		taskset -p $((0x1<<cpu_offst)) $convpid
		echo "started jconvolver on CPU $((1+cpu_offst))"
        cpu_offst=$(((cpu_offst+1)%N_CPUS))
		rm /var/run/sound/jconvolver 2>/dev/null
		ln -s /proc/${convpid}/exe /var/run/sound/jconvolver || continue
		start=2
		continue
	}
	
	# check if zita-n2j running
	zitapid=`pgrep zita-n2j` || {
		echo "Starting zita-n2j"
		/etc/init.d/zita-n2j start
		echo "Started..."		
		start=3		
		continue
	}

	#check that power switch has started
	[ -z "$GPIO" ] || {
		meterpid=`pgrep jack_meter` || {
			echo "Starting power switch"
			jack_meter -g $GPIO -p$GPIO_HOLD jconvolver:Out-1 jconvolver:Out-2 &
			start=4
			continue
		}
	}

	# run jack event monitor in background- sending output to named pipe. wait for data on the pipe-
	# specifically "Client wifi-n2j registered" type events- which we will use to trigger connects
	# dbus-monitor --monitor  "type=signal,path=/org/jackaudio/Controller,interface='org.jackaudio.JackPatchbay',member=PortAppeared"
	[ -n "$start" ] && {
		echo "Started audio ($start) jackd($jackpid) jconvolver($convpid) n2j($zitapid)"
		start=
		mount -a
		pgrep mpd || /etc/init.d/mpd start
	}
	check_zita_ports
	sleep 3
done;
